#include<bits/stdc++.h>
using namespace std;


// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
 
// typedef __gnu_pbds::tree<int, __gnu_pbds::null_type, less<int>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update> ordered_set;



/*code by Sushanth_iitbbs*/
/*cf profile :- Janaki_vallabh*/

// /* Trust the process ~Dhoni */

/* CAUTION */
/* DOGS AND THALA HATERS ARE NOT ALLOWED */


/*
.___  ___.      _______.    _______   __    __    ______   .__   __.  __      ______  
|   \/   |     /       |   |       \ |  |  |  |  /  __  \  |  \ |  | |  |    |____  | 
|  \  /  |    |   (----`   |  .--.  ||  |__|  | |  |  |  | |   \|  | |  |        / /  
|  |\/|  |     \   \       |  |  |  ||   __   | |  |  |  | |  . `  | |  |       / /   
|  |  |  | .----)   |      |  '--'  ||  |  |  | |  `--'  | |  |\   | |  |      / /    
|__|  |__| |_______/       |_______/ |__|  |__|  \______/  |__| \__| |__|     /_/     
                                                                                      
*/

/*
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠤⠤⠤⠦⠤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠚⠉⠁⣀⡤⠴⠒⠂⠀⠀⠉⢓⠲⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠖⠉⠀⢀⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⢳⡀⠈⠓⢤⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠁⠀⢀⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⢳⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠎⠀⠀⣠⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢯⣧⠀⡴⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠘⠋⣰⢠⠏⣿⣳⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢺⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠈⠳⢤⣰⠃⢸⡖⢿⣿⣾⡋⠝⠓⠦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣡⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣶⣾⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠈⠙⢲⡷⣤⣙⡉⠛⢳⣶⣤⣀⠉⢙⡷⢶⣤⡄⠀⠀⠀⠀⢺⣇⣿⣾⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣠⣤⣴⣿⣿⣿⣿⣷⣟⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⢸⣿⡙⠻⢿⣿⣿⣿⣿⣟⠛⠿⣶⣿⣷⢻⠇⠀⠀⠀⢰⣿⢧⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣴⢾⣻⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⣆⠈⠳⣄⠀⠀⠀⠀⠘⣷⣷⣦⣤⣀⣿⣿⣿⣿⣿⣶⣤⣹⠅⠸⠦⣄⣀⡀⣼⠯⠀⠙⠲⣤⡀⠀⠀⠀
⠀⠀⢖⡾⣱⢿⣿⣧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠊⠹⣿⣦⡈⠳⣄⠀⠀⠀⠸⣿⣄⠉⣿⣿⣿⣿⣽⣿⣭⣿⡯⠷⢦⣀⠀⠀⠈⠁⠀⠀⠀⠀⠀⢹⡄⠀
⠀⢀⣞⣼⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡝⣦⢀⣾⣿⣿⢿⡀⠀⠀⠀⠙⣾⢷⣿⣿⡿⣿⣿⣷⣿⣧⡀⠀⠀⠈⠓⠦⣄⣀⡀⠀⣀⣠⣴⠞⠁⠀⠀
⠀⢸⣿⣿⣿⣾⡿⣧⣿⣿⣿⣋⣿⣿⣿⣿⣿⡟⠀⠰⣄⢺⣿⣿⣾⣿⠛⠷⣦⡀⠀⠹⣾⣿⣿⣿⣿⣿⡏⠉⢿⡳⠦⢤⣀⣀⠀⠀⠈⠙⢯⣩⡉⠀⠀⠀⠀
⠠⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣏⣠⡄⠀⠈⢿⡛⠭⣻⣿⠁⢐⣦⣽⡆⠀⠘⣿⣿⣿⣿⣿⡗⠠⠸⡇⢀⠘⡇⠉⣷⢤⣄⠀⠈⢻⣿⡄⠀⠀
⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠶⣿⣿⣷⣄⡀⠈⠻⣮⣢⠻⢷⣿⣿⣯⡀⠀⠀⢹⣿⣿⣿⡟⡇⡄⡀⣷⠘⠀⢧⢠⢸⢐⣾⣤⣤⣴⣻⡇⠀
⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣏⢙⣿⡞⠛⢿⣿⣾⣷⡀⠀⠈⢷⣄⣁⣼⣿⡿⣇⠀⠀⢀⡏⢿⡗⠺⢿⣉⠈⠉⠀⢀⠭⡏⠘⣾⣿⠹⣷⣿⠋⠀⠀⠀⠀
⢨⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣌⢮⢿⡿⢶⣄⠙⣿⡿⡻⠾⡷⢬⣿⣿⡟⣿⣷⢾⡀⠀⠸⣄⠀⢿⣦⣾⠁⣷⡂⠀⠿⢟⠸⢷⠿⢿⣺⠿⠁⠀⠀⠀⠀⠀
⠘⣇⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣊⠉⣨⣧⣛⣳⣈⣀⠃⣸⣵⣇⣾⣿⣿⣶⣟⡆⠀⠙⣦⠔⠈⠃⠰⠍⠁⡤⠐⢚⣀⢸⠂⢺⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⢿⡿⣿⣿⣯⣮⣼⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠈⠷⣤⡀⢤⣤⢀⣀⡀⠘⡯⡿⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⣼⣿⣀⣘⡿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠈⠙⢿⣅⣉⠛⢛⡋⠸⡟⡘⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠰⠯⢵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠛⠉⠉⠐⠺⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡟⣛⠑⣪⠥⠈⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣦⣘⣿⣿⣿⣿⣿⣿⣿⣏⣿⣾⣿⣿⣿⣯⣤⣀⠀⠀⠀⢻⡿⠿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣌⠀⠐⠀⢲⠄⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠻⢭⡿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣭⣭⣿⣳⢮⣝⢶⣄⣈⣷⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣷⠤⠠⡍⠡⡀⠘⣇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢾⣧⣾⣻⣿⣿⣿⣿⣿⡿⣋⣠⡾⠋⠛⠛⠋⠉⠀⠈⠉⠉⠙⠶⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡤⠀⠘⠀⣂⣱⡸⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠈⠛⠿⠃⢉⣿⡿⣻⡏⣿⡉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣁⡌⡅⠘⠂⡀⠃⢹⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣠⡯⣺⠕⠫⡶⠛⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢽⣺⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣟⣈⣉⣀⣈⠀⠀⢷⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣰⢻⠼⠁⠀⠀⠀⠀⠀⢣⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠲⠶⠾⠿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣷⣾⣆⠀⠀⠀⠀⠀
⠀⠀⠀⣰⠋⠚⢸⣀⣤⣤⡍⠢⣴⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⢀⡴⣏⡟⢶⣍⡿⣿⣿⣶⣤⣀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀
⠀⠀⢰⡟⠈⣼⣿⢲⣿⣦⢳⢉⣶⣿⣇⠀⠀⠀⠀⢀⠀⢰⣀⠀⠈⣷⣄⣠⣾⠹⠶⣽⣷⡿⢿⣝⡿⠞⣠⠽⣻⣿⣯⠻⡟⠛⠿⠿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
⠀⠀⣾⡷⣺⣿⣿⡼⣟⣣⣿⣿⣿⣿⣿⣧⠀⠀⠀⣠⣸⣄⢿⣆⠀⠙⢿⣧⡪⢓⣯⡼⡳⣽⣾⠃⣠⠞⣵⣞⣯⢞⣼⠁⠹⡄⠀⠀⠈⠙⠻⣿⣿⠂⠀⠀⠀⠀
⠀⢠⣿⣾⡏⣿⡟⢉⣙⣾⣿⣿⣿⣿⣿⣿⣷⣜⣾⣮⣻⣿⣯⣿⣷⡀⠘⢿⣷⣽⣍⣙⣮⣏⣀⡞⢁⣸⣄⠸⠯⣽⠉⠀⠀⣷⠀⠀⠀⠀⠀⠹⣿⠀⠀
⠀⠀
*/

// #pragma GCC optimize("Ofast")
// #pragma GCC target("avx,avx2,fma")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
// some data types

#define ll long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi vector<int>
#define vll vector<long long>
#define mii map<int, int>
#define si set<int>
#define sc set<char>
#define gcd(m,n) __gcd(m,n)
#define sz(a) ((int)a.size())
// some for loops


#define f(i,s,e) for(long long int i=s;i<e;i++)
#define ef(i,s,e) for(long long int i=s;i<=e;i++)
#define pb push_back
#define inf 1000000000000000000LL
#define eb emplace_back
#define all(x) x.begin(),x.end()

template<typename T>istream & operator >> (istream &in, vector<T> &a){for(auto &x:a)in>>x;return in;}
template<typename T>ostream & operator << (ostream &out, vector<T> &a){for(auto &x:a)out<<x<<" ";return out;}
template<typename T,typename K>istream & operator >> (istream &in,  pair<T,K> &a){in>>a.F>>a.S;return in;}
template<typename T,typename K>ostream & operator << (ostream &out, pair<T,K> &a){out<<a.F<<" "<<a.S;return out;}

ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m

ll mex(vector<ll> const& A) {
    set<int> b(A.begin(), A.end());

    int result = 0;
    while (b.count(result))
        ++result;
    return result;
}

// this is a way to get bit representation in k;(k=2 means binary),google for more
// info on this 
// for(int i = 0;i<n;++i){
//      cin>>m;
//      j = 0;
//      while(m){
//          a[j] += (m%k);
//          j++;
//          m /= k;
//      }
// }



// int computeXOR(int n)
// {
  
//   // If n is a multiple of 4
//   if (n % 4 == 0)
//     return n;

//   // If n%4 gives remainder 1
//   if (n % 4 == 1)
//     return 1;

//   // If n%4 gives remainder 2
//   if (n % 4 == 2)
//     return n + 1;

//   // If n%4 gives remainder 3
//   return 0;

#define Endl endl;
#define x first
#define y second
#define pb push_back
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);



// thala for a reason 

// long long binpow(long long a, long long b, long long m) {
//     a %= m;
//     long long res = 1;
//     while (b > 0) {
//         if (b & 1)
//             res = res * a % m;
//         a = a * a % m;
//         b >>= 1;
//     }
//     return res;  
// }


bool isprime(ll n) { 
      if (n <= 1) return false; 
      if (n <= 3) return true; 
      
      if (n % 2 == 0 || n % 3 == 0) return false; 
      
      for (ll i = 5; i * i <= n; i += 6) 
        if (n % i == 0 || n % (i+2) == 0) 
          return false; 
      
      return true; 
} 
     
    bool prime[15000105]; 
    void sieve(int n) { 
      for (ll i = 0; i <= n; i++) prime[i] = 1;
      for (ll p = 2; p * p <= n; p++) { 
        if (prime[p] == true) { 
          for (ll i = p * p; i <= n; i += p) 
            prime[i] = false; 
        } 
      } 
      prime[1] = prime[0] = 0;
    } 
     
    vector<ll> primelist;
    bool __primes_generated__ = 0;
     
    void genprimes(int n) {
      __primes_generated__ = 1;
      sieve(n + 1);
      for (ll i = 2; i <= n; i++) if (prime[i]) primelist.push_back(i);
    }


// void solve(void){
//     // cout<<"thala for a reason" <<endl;
    
//     // cout<<"thala for a reason" <<endl;
// }


int main(void)
{
    ios::sync_with_stdio(false); // For faster I/O
    cin.tie(NULL);
    cout.tie(NULL);
    //77
    // cout<<"tc -> "<<tc<<endl;
    // thala for a reason;
    // dogs and thala haters are not allowed;
    genprimes(1e5+1); // this will generate primes upto n;
    // for(auto i: primelist)
    //     cout<<i<<" ";
    // cout<<endl;
        ll n,m; cin>>n>>m;
        vector<vector<ll>>mat(n,vector<ll>(m));
        for(int i = 0;i<n;++i){
            for(int j = 0;j<m;++j)
                cin>>mat[i][j];
        }
        ll movesR = 1e5+1; ll movesC = 1e5+1;
        for(int i = 0;i<n;++i){
            ll rmoves = 0;
            for(int j = 0;j<m;++j){
                ll lb = *lower_bound(all(primelist),mat[i][j]);
                rmoves += (lb - mat[i][j]);
            }
            movesR = min(movesR,rmoves);
        }
        for(int j = 0;j<m;++j){
            ll cmoves = 0;
            for(int i = 0;i<n;++i){
                ll lb = *lower_bound(all(primelist),mat[i][j]);
                cmoves += (lb - mat[i][j]);
            }
            movesC = min(movesC,cmoves);
        }
        cout<< min(movesR,movesC) << endl;
    return 0;
}
